/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package my.Normalization;

/**
 *
 * @author Murat Isbilen
 */
import java.sql.*;
import javax.swing.*;
import java.awt.*;
import net.proteanit.sql.*;
import java.awt.event.*;
import javax.swing.table.*;
import java.text.DecimalFormat;

public class NormalizationUI extends JFrame {

    /**
     * Creates new form NormalizationUI
     */
    public NormalizationUI() {
        initComponents();
        
        jButton2.setEnabled(false);
        jButton3.setEnabled(false);
        jButton4.setEnabled(false);
        jButton5.setEnabled(false);
        jButton6.setEnabled(false);
        jButton7.setEnabled(false);
        jButton8.setEnabled(false);
        jButton9.setEnabled(false);
        jComboBox1.setSelectedIndex(3);
        jComboBox2.setSelectedIndex(6);
        jComboBox3.setSelectedIndex(2);
        jComboBox4.setSelectedIndex(3);
        jPanel22.addMouseMotionListener(new MouseL());
        this.setTitle("Gene Expression Analysis Tool");
        ToolTipManager.sharedInstance().setInitialDelay(0) ;
        djPanel22 = new Dimension(jPanel22.getPreferredSize());
        try{
            Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance();
            connection = DriverManager.getConnection(connectionURL);
            statement = connection.createStatement();
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Unable to connect to the database!");
        }
        
        DatabaseMetaData meta;
        ResultSet res;
        try{
            int cnt = 0;
            meta = connection.getMetaData();
            res = meta.getTables(null, null, null, new String[]{"TABLE"});
            while(res.next()){
                cnt++;
            }
            
            expButs = new JButton[cnt];
            res = meta.getTables(null, null, null, new String[]{"TABLE"});
            
            int i = 0;
            while(res.next()){
                expButs[i] = new JButton(res.getString("TABLE_NAME"));
                expButs[i++].addActionListener(new Experiment());
            }
            
            jPanel15.setLayout(new GridLayout(expButs.length,1));
            for(int j=0;j<expButs.length;j++){
                jPanel15.add(expButs[j]);
            }
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Unable to acqure tables from the database!");
        }
        this.validate();
        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jScrollPane5 = new javax.swing.JScrollPane();
        jPanel19 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jPanel22 = new javax.swing.JPanel(){
            public void paintComponent(Graphics g){
                super.paintComponent(g);

                DefaultTableModel dtm = (DefaultTableModel)jTable1.getModel();
                int rownum = jTable1.getRowCount();
                int colnum = jTable1.getColumnCount();
                double[][] tabledata = new double[rownum-props.length][colnum-2];
                for(int m=props.length;m<rownum;m++){
                    for(int n=2;n<colnum;n++){
                        try{
                            tabledata[m-props.length][n-2] = Double.parseDouble((String)dtm.getValueAt(m,n));
                        }catch(Exception e){
                            System.out.println("m: "+m+", n: "+n+", str: "+(String)dtm.getValueAt(m,n));
                        }
                    }
                }
                bp = new BoxPlot(tabledata);
                double[] meds = bp.getMed();
                double[] q1s = bp.getQ1();
                double[] q3s = bp.getQ3();
                double[] w1s = bp.getW1();
                double[] w2s = bp.getW2();
                String[] namess = bp.getNames();
                double max = bp.max(bp.getW2());
                double min = bp.min(bp.getW1());
                double[] smeds = meds.clone();
                double[] sq1s = q1s.clone();
                double[] sq3s = q3s.clone();
                double[] sw1s = w1s.clone();
                double[] sw2s = w2s.clone();
                int htot = jPanel22.getHeight();
                g.drawLine(40,10,40,htot-10);
                g.drawLine(35,10,40,10);
                g.drawLine(35,htot-10,40,htot-10);
                DecimalFormat twoDForm = new DecimalFormat("#.##");
                double fmax = Double.valueOf(twoDForm.format(max));
                double fmin = Double.valueOf(twoDForm.format(min));
                g.drawString(""+fmax, 3, 15);
                g.drawString(""+fmin, 3, htot-5);
                for(int i = 1;i<5;i++){
                    g.drawLine(35,10+i*(htot-20)/5,40,10+i*(htot-20)/5);
                    double val = Double.valueOf(twoDForm.format(max-i*(max-min)/5));
                    g.drawString(""+val, 3, 15+i*(htot-20)/5);
                }

                int xpos = 60;

                for(int i = 0; i<smeds.length;i++){
                    smeds[i] = (jPanel22.getHeight()-20)*(smeds[i]-min)/(max-min);
                    sq1s[i] = (jPanel22.getHeight()-20)*(sq1s[i]-min)/(max-min);
                    sq3s[i] = (jPanel22.getHeight()-20)*(sq3s[i]-min)/(max-min);
                    sw1s[i] = (jPanel22.getHeight()-20)*(sw1s[i]-min)/(max-min);
                    sw2s[i] = (jPanel22.getHeight()-20)*(sw2s[i]-min)/(max-min);
                    int y1 = (int)Math.floor(htot-(smeds[i]+10));
                    int y2 = (int)Math.floor(htot-(sq1s[i]+10));
                    int y3 = (int)Math.floor(htot-(sq3s[i]+10));
                    int y4 = (int)Math.floor(htot-(sw1s[i]+10));
                    int y5 = (int)Math.floor(htot-(sw2s[i]+10));

                    g.drawLine(xpos, y1, xpos+20, y1);
                    g.drawLine(xpos, y2, xpos+20, y2);
                    g.drawLine(xpos, y3, xpos+20, y3);
                    g.drawLine(xpos, y4, xpos+20, y4);
                    g.drawLine(xpos, y5, xpos+20, y5);

                    g.drawLine(xpos+10, y5, xpos+10, y3);
                    g.drawLine(xpos, y3, xpos, y2);
                    g.drawLine(xpos+20, y3, xpos+20, y2);
                    g.drawLine(xpos+10, y2, xpos+10, y4);

                    xpos = xpos + 40;

                }
            }
        };
        jPanel21 = new javax.swing.JPanel();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jPanel15 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel11 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox();
        jButton6 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton8 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jFileChooser1 = new javax.swing.JFileChooser();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        jScrollPane5.setPreferredSize(new java.awt.Dimension(1465, 710));

        jPanel19.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel19.setPreferredSize(new java.awt.Dimension(1465, 710));

        jPanel16.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel17.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel18.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jPanel20.setBackground(new java.awt.Color(51, 51, 51));

        jScrollPane6.setMaximumSize(new java.awt.Dimension(100, 100));

        jPanel22.setBackground(new java.awt.Color(255, 255, 255));
        jPanel22.setMaximumSize(new java.awt.Dimension(906, 513));

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 906, Short.MAX_VALUE)
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 513, Short.MAX_VALUE)
        );

        jScrollPane6.setViewportView(jPanel22);

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel21.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 151, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(54, Short.MAX_VALUE))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        jScrollPane5.setViewportView(jPanel19);

        jMenu3.setText("File");

        jMenuItem2.setText("jMenuItem2");
        jMenu3.add(jMenuItem2);

        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        jFrame1.setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1512, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 752, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(1405, 759));

        jPanel1.setPreferredSize(new java.awt.Dimension(1400, 755));

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton1.setText("Select CEL Files");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel15.setBackground(new java.awt.Color(51, 51, 51));
        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Experiments", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 219, Short.MAX_VALUE)
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 453, Short.MAX_VALUE)
        );

        jScrollPane4.setViewportView(jPanel15);

        jButton7.setText("Delete Selected Experiment");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(63, 63, 63)
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jProgressBar1.setStringPainted(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText(" ");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(83, Short.MAX_VALUE)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(51, 51, 51));
        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel8.setBackground(new java.awt.Color(51, 51, 51));

        jButton2.setText("Clear Selection");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Select All");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Unselect All");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Next");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Experiment Name:");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)))
        );

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 849, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 434, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(jPanel7);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("CEL Files", jPanel5);

        jPanel9.setBackground(new java.awt.Color(51, 51, 51));
        jPanel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));

        jPanel12.setBackground(new java.awt.Color(51, 51, 51));
        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Options", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Background Correction Method:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "bg.correct", "mas", "none", "rma" }));

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Normalization Method:");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "constant", "contrasts", "invariantset", "loess", "methods", "qspline", "quantiles", "quantiles.robust" }));
        jComboBox2.setToolTipText("");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "mas", "methods", "pmonly", "subtractmm" }));

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("PM Correction Method:");

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Summarization Method:");

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "avgdiff", "liwong", "mas", "medianpolish", "playerout" }));

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(550, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(272, Short.MAX_VALUE))
        );

        jButton6.setText("Next");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton9.setText("Cancel");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton9))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Normalization Options", jPanel9);

        jPanel14.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setEnabled(false);
        jTable1.setFillsViewportHeight(true);
        jScrollPane3.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 833, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton8.setText("Save");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton10.setText("Analysis Center");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton10)))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8)
                    .addComponent(jButton10))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Normalized Expression", jPanel13);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 240, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(188, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        jFileChooser1.setMultiSelectionEnabled(true);

        jMenu1.setText("File");

        jMenuItem1.setText("Add CEL Files");
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1468, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 941, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int returnVal = jFileChooser1.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {            
            
            java.io.File[] file = jFileChooser1.getSelectedFiles();
            
            tempCelFilesCB = new javax.swing.JCheckBox[celFilesCB.length + file.length];
            for(int i = 0; i<celFilesCB.length; i++){
                tempCelFilesCB[i] = celFilesCB[i];
            }           
            
            for(int i = 0; i<file.length;i++){
                tempCelFilesCB[i+celFilesCB.length] = new javax.swing.JCheckBox(file[i].getPath());
            }
            celFilesCB = new javax.swing.JCheckBox[tempCelFilesCB.length];
            jPanel7.setLayout(new java.awt.GridLayout(celFilesCB.length,1));
            for(int i = 0; i<celFilesCB.length;i++){
                celFilesCB[i] = tempCelFilesCB[i];
                celFilesCB[i].setSelected(true);
                jPanel7.add(celFilesCB[i]);
            }
            jButton2.setEnabled(true);
            jButton3.setEnabled(true);
            jButton4.setEnabled(true);
            jPanel7.revalidate();
            jPanel7.repaint();
        } else {
            System.out.println("File access cancelled by user.");
        }
        
        jButton5.setEnabled(true);
        jTabbedPane1.setSelectedIndex(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int count = 0;
        int countelse = 0;
        javax.swing.JCheckBox[] cb = new javax.swing.JCheckBox[0];
        javax.swing.JCheckBox[] cb2 = new javax.swing.JCheckBox[cb.length];
        for(int i = 0; i<cb.length;i++){
            cb2[i] = cb[i];
        }
        for(int i = 0; i<celFilesCB.length; i++){
            try{
                if(celFilesCB[i].isSelected()){
                    jPanel7.remove(celFilesCB[i]);
                    count++;
                }else{
                    cb2 = new javax.swing.JCheckBox[cb.length];
                    for(int j = 0; j<cb.length;j++){
                        cb2[j] = cb[j];
                    }
                    countelse++;
                    cb = new javax.swing.JCheckBox[countelse];
                    for(int j = 0; j<(cb.length-1);j++){
                        cb[j] = cb2[j];
                    }
                    cb[cb.length-1] = celFilesCB[i];
                }
            }catch(Exception e){
                
            }
        }
        
        celFilesCB = new javax.swing.JCheckBox[cb.length];
        for(int i = 0; i<celFilesCB.length; i++){
            celFilesCB[i] = cb[i];
        }
        if(celFilesCB.length==0){
            jButton2.setEnabled(false);
            jButton3.setEnabled(false);
            jButton4.setEnabled(false);
            celFilesCB = new javax.swing.JCheckBox[0];
        }
        
        jPanel7.revalidate();
        jPanel7.repaint();
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        for(int i = 0; i<celFilesCB.length; i++){
            celFilesCB[i].setSelected(true);
        }
        jPanel7.revalidate();
        jPanel7.repaint();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        for(int i = 0; i<celFilesCB.length; i++){
            celFilesCB[i].setSelected(false);
        }
        jPanel7.revalidate();
        jPanel7.repaint();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        boolean check = true;
        for(int i = 0;i<expButs.length;i++){
            if((expButs[i].getText()).toLowerCase().equals((jTextField1.getText()).toLowerCase())){
                check=false;
            }
        }
        if(check){
            if(!jTextField1.getText().equals("")){
                jButton5.setEnabled(false);
                try{
                    new Thread(new Runnable() {
                        public void run() {
                            jLabel1.setText("Removing Files. Please Wait...");
                            int b5count = 0;
                            java.io.File folder = new java.io.File("Cel Files");
                            if(folder.exists()){
                                String[] children = folder.list();
                                for(int k = 0; k<children.length;k++){
                                    java.io.File f = new java.io.File("Cel Files\\\\"+children[k]);
                                    f.delete();
                                    jProgressBar1.setValue(100*(k+1)/(children.length));
                                }
                                folder.delete();
                            }

                            folder.mkdir();
                            jLabel1.setText("Copying Files. Please Wait...");
                            for(int k = 0; k<celFilesCB.length;k++){
                                if(celFilesCB[k].isSelected()){
                                    b5count++;
                                }
                            }
                            javax.swing.JCheckBox[] cb = new javax.swing.JCheckBox[b5count];

                            int cbcount = 0;
                            for(int k = 0; k<celFilesCB.length;k++){
                                if(celFilesCB[k].isSelected()){
                                    cb[cbcount++] = new javax.swing.JCheckBox(celFilesCB[k].getText());
                                }
                            }

                            for(int i = 0; i<cb.length;i++){
                                String sPath = cb[i].getText();
                                String fname = "";
                                String[] arr = sPath.split("\\\\");
                                java.nio.file.Path source = java.nio.file.Paths.get(sPath);
                                java.nio.file.Path target = java.nio.file.Paths.get("Cel Files\\\\"+arr[arr.length-1]);
                                try{
                                    java.nio.file.Files.copy(source, target,java.nio.file.StandardCopyOption.REPLACE_EXISTING);
                                    jProgressBar1.setValue(100*(i+1)/cb.length);
                                }catch(Exception ee){

                                }
                            }
                            jLabel1.setText("Files are copied! Now, You can specify normalization options...");
                            jTabbedPane1.setSelectedIndex(1);
                            jButton5.setEnabled(true);
                        }
                    }).start();
                }catch(IllegalStateException ex){

                }
            }else{
                JOptionPane.showMessageDialog(null, "Please enter an Experiment Name!");
            }
        }else{
            JOptionPane.showMessageDialog(null, "Experiment "+jTextField1.getText()+" exists. Please use another experiment name!");
        }
        jButton6.setEnabled(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        
        if(expButs.length>0){
            for(int a=0;a<expButs.length;a++){
                expButs[a].setEnabled(false);
            }
        }
        
        jLabel1.setText("Recognizing R Directory...");
        jProgressBar1.setIndeterminate(true);
        jProgressBar1.setStringPainted(false);
        jButton6.setEnabled(false);
        jButton1.setEnabled(false);
        jButton2.setEnabled(false);
        jButton3.setEnabled(false);
        jButton4.setEnabled(false);
        jButton5.setEnabled(false);
        jButton7.setEnabled(false);
        jButton8.setEnabled(false);
        jButton9.setEnabled(true);
        
        try{
             Runnable r1 = new Runnable() {
                public void run() {
                    java.io.FileReader frd;
                    java.io.BufferedReader brd;
                    java.io.FileReader frd2;
                    java.io.BufferedReader brd2;
                    java.io.FileWriter fwr;
                    java.io.BufferedWriter bwr;
                    int colnum = 0;
                    int rownum = -1;
                    
                    
                    try{
                        fwr = new java.io.FileWriter("options.mi", false);
                        bwr = new java.io.BufferedWriter(fwr);
                        
                        frd = new java.io.FileReader("RDirectory.mi");
                        brd = new java.io.BufferedReader(frd);
                        
                        frd2 = new java.io.FileReader("norm.txt");
                        brd2 = new java.io.BufferedReader(frd2);
                        
                        RDIRECTORY = brd.readLine();
                        brd.close();
                        bwr.write(jComboBox1.getSelectedItem().toString()+"\n"+jComboBox2.getSelectedItem().toString()+"\n"+jComboBox3.getSelectedItem().toString()+"\n"+jComboBox4.getSelectedItem().toString()+"\n");
                        bwr.close();
                        Process p;
                        java.io.BufferedReader r = null;
                        
                        boolean rcheck = true;
                        
                        while(rcheck){
                            try{
                                p = Runtime.getRuntime().exec("cmd /c "+RDIRECTORY+"/R --slave < rtry.r");
                                r = new java.io.BufferedReader( new java.io.InputStreamReader(p.getErrorStream()));
                                String s = null;
                                s=r.readLine();
                                if(s!=null){
                                    rdir();
                                }else{
                                    rcheck=false;
                                }

                            }catch(Exception exx){
                                exx.printStackTrace();
                            }
                        }
                        jLabel1.setText("Installing 'affy' package...");
                        try{
                            p = Runtime.getRuntime().exec("cmd /c "+RDIRECTORY+"/R --slave < affy.r");
                            r = new java.io.BufferedReader( new java.io.InputStreamReader(p.getErrorStream()));
                            String s = null;
                            s=r.readLine();
                            if(s!=null){
                                System.out.println(s);
                            }else{
                                rcheck=false;
                            }
                        }catch(Exception exx){
                            exx.printStackTrace();
                        }
                        
                        jLabel1.setText("Normalization is going on. Please wait...");
                        try{
                            p = Runtime.getRuntime().exec("cmd /c "+RDIRECTORY+"/R --slave < RMA_Norm.r");
                            r = new java.io.BufferedReader( new java.io.InputStreamReader(p.getErrorStream()));
                            String s = null;
                            s=r.readLine();
                            if(s!=null){
                                System.out.println(s);
                            }else{
                                rcheck=false;
                            }
                        }catch(Exception exx){
                            exx.printStackTrace();
                        }
                        
                        jLabel1.setText("Saving to the database. Please wait...");
                        String st2 = "";
                        String st = brd2.readLine();
                        st = brd2.readLine();st = brd2.readLine();st = brd2.readLine();
                        st = brd2.readLine();st = brd2.readLine();
                        
                        while((st=brd2.readLine())!=null){
                            rownum++;
                            st2 = st;
                        }
                        brd2.close();
                        java.util.StringTokenizer stok = new java.util.StringTokenizer(st2,"\t");
                        colnum = stok.countTokens();
                        
                        frd2 = new java.io.FileReader("norm.txt");
                        brd2 = new java.io.BufferedReader(frd2);
                        
                        props[0] = brd2.readLine();props[1] = brd2.readLine();props[2] = brd2.readLine();
                        props[3] = brd2.readLine();props[4] = brd2.readLine();st = brd2.readLine();
                        st = brd2.readLine();props[5]="";
                        ///////////////////////////////////////////////////////////////
                        
                        stok = new java.util.StringTokenizer(st,"\t");
                        
                        int i = 0;
                        colnames = new String[colnum];
                        while(stok.hasMoreTokens()){
                            colnames[i++] = stok.nextToken();
                        }
                        
                        i = 0;
                        int j = 0;
                        dat = new String[rownum][colnum];
                        while((st=brd2.readLine())!=null){
                            stok = new java.util.StringTokenizer(st,"\t");
                            while(stok.hasMoreTokens()){
                                dat[i][j++] = stok.nextToken();
                            }
                            i++;
                            j = 0;
                        }
                        
                        brd2.close();
                        javax.swing.table.DefaultTableModel dtm = new javax.swing.table.DefaultTableModel();
                        dtm.addColumn("Row");
                        for(int m=0;m<colnum;m++){
                            dtm.addColumn(colnames[m]);
                        }
                        
                        for(int m = 0;m<props.length;m++){
                            String[] row = new String[colnum+1];
                            row[0] ="";
                            row[1] = props[m];
                            dtm.addRow(row);
                        }
                        
                        for(int m=0;m<rownum;m++){
                            String[] row = new String[colnum+1];
                            row[0] ="" + (m+1);
                            for(int k=1;k<row.length;k++){
                                row[k] = dat[m][k-1];
                            }
                            dtm.addRow(row);
                        }
                        jTable1.setModel(dtm);
                        
                        String QueryString = ((((colnames[0].replace(" ","")).replace(".","")).replace("-","")).replace("(","")).replace(")","") + " VARCHAR(100)";
                        for(int k=1;k<colnum;k++){
                            QueryString += ","+((((colnames[k].replace(" ","")).replace(".","")).replace("-","")).replace("(","")).replace(")","") + " VARCHAR(100)";
                        }
                        String command = "CREATE table "+jTextField1.getText()+"("+QueryString+")";
                        statement.execute(command);
                       
                        
                        String values ="";
                        String command2;
                        for(int m=0;m<props.length;m++){
                            values = "";
                            for(int n = 1;n<dat[m].length;n++){
                                values += ",' '";
                            }
                            command2 = "insert into "+jTextField1.getText()+" values('"+props[m]+"'"+values+")";
                            statement.execute(command2);
                        }
                        
                        values ="";
                        for(int m=0;m<dat.length;m++){
                            values = "'"+dat[m][0]+"'";
                            for(int n = 1;n<dat[m].length;n++){
                                values += ",'" + dat[m][n]+"'";
                            }
                            command2 = "insert into "+jTextField1.getText()+" values("+values+")";
                            statement.execute(command2);
                        }
                        expButs2 = new JButton[expButs.length+1];
                        for(int m=0;m<expButs.length;m++){
                            expButs2[m] = expButs[m];
                        }
                        expButs2[expButs.length] = new JButton(jTextField1.getText());
                        expButs = new JButton[expButs2.length];
                        for(int m=0;m<expButs.length;m++){
                            expButs[m] = expButs2[m];
                            expButs[m].addActionListener(new Experiment());
                        }
                        jPanel15.setLayout(new GridLayout(expButs.length,1));
                        for(int m=0;m<expButs.length;m++){
                            jPanel15.add(expButs[m]);
                        }
                        
                         selectedExperiment = jTextField1.getText().toUpperCase();
                        
                    }catch(Exception e){
                        e.printStackTrace();
                    }
                    
                    jLabel1.setText("Normalization Done!");
                    jProgressBar1.setIndeterminate(false);
                    jProgressBar1.setStringPainted(true);
                    jTabbedPane1.setSelectedIndex(2);
                    jButton3.doClick();
                    jButton2.doClick();
                    jButton5.setEnabled(false);
                    jButton6.setEnabled(false);
                    jButton1.setEnabled(true);
                    jButton2.setEnabled(true);
                    jButton3.setEnabled(true);
                    jButton4.setEnabled(true);
                    jButton7.setEnabled(true);
                    jButton8.setEnabled(true);
                    jButton9.setEnabled(false);
                    
                    if(expButs.length>0){
                        for(int a=0;a<expButs.length;a++){
                            expButs[a].setEnabled(true);
                        }
                    }
                    
                    int border = (colnum-2)*40+70;
                    if(border>jPanel22.getWidth()){
                        Dimension d = new Dimension(jPanel22.getSize());
                        jPanel22.setPreferredSize(new Dimension(border, jPanel22.getHeight()));
                        jScrollPane6.setPreferredSize(d);
                    }
                }
            };
            
            th1 = new Thread(r1);
            th1.start();
            
        }catch(IllegalStateException ex){
            System.out.println("HATA 2!!!");
        }
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        jButton7.setEnabled(false);
        int r = JOptionPane.showConfirmDialog(null, "Do you really want to remove " + selectedExperiment + " experiment?","Remove Experiment",JOptionPane.YES_NO_OPTION);
        
        if(r==JOptionPane.YES_OPTION){
            jButton7.setEnabled(false);
            jLabel1.setText("Removing selected experiment. Please Wait...");
            jProgressBar1.setIndeterminate(true);
            jProgressBar1.setStringPainted(false);
            try{
                 Runnable r1 = new Runnable() {
                    public void run() {
                        if(expButs.length>0){
                            expButs2 = new JButton[expButs.length-1];
                            int j = 0;
                            for(int i=0;i<expButs.length;i++){
                                if(expButs[i].getText().equals(selectedExperiment)){
                                    jPanel15.remove(expButs[i]);
                                }else{
                                    expButs2[j++]=expButs[i];
                                }
                            }

                            expButs = new JButton[expButs2.length];
                            for(int i=0;i<expButs.length;i++){
                                expButs[i] = expButs2[i];
                            }

                            try{
                                statement.execute("DROP TABLE "+selectedExperiment);
                                //jPanel15.remove();
                            }catch(Exception e){

                            }
                            javax.swing.table.DefaultTableModel dtm = new javax.swing.table.DefaultTableModel();
                            jTable1.setModel(dtm);
                            jPanel15.validate();
                            jPanel15.repaint();
                        }else{
                            jButton7.setEnabled(false);
                        }
                        if(expButs.length==0){
                            jButton7.setEnabled(false);
                        }

                        jLabel1.setText("Experiment removed!");
                        jProgressBar1.setIndeterminate(false);
                        jProgressBar1.setStringPainted(true);
                    }
                };

                Thread th1 = new Thread(r1);
                th1.start();

            }catch(IllegalStateException ex){
                ex.printStackTrace();
            }
            jButton7.setEnabled(true);
        } else if(r==JOptionPane.NO_OPTION){
            jButton7.setEnabled(true);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        
        try{
             Runnable r1 = new Runnable() {
                public void run() {
        
                    JFileChooser saveFile = new JFileChooser();

                    int returnVal = saveFile.showSaveDialog(null);
                    if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
                        jLabel1.setText("Saving expression data. Please Wait...");
                        jProgressBar1.setIndeterminate(true);
                        jProgressBar1.setStringPainted(false);
                        
                        String direct = saveFile.getCurrentDirectory().getPath();
                        String fileName = saveFile.getSelectedFile().getName();
                        
                        java.io.FileWriter fwr;
                        java.io.BufferedWriter bwr;

                        try{
                            fwr = new java.io.FileWriter(direct+"\\\\"+fileName);
                            bwr = new java.io.BufferedWriter(fwr);
                            DefaultTableModel dtm = (DefaultTableModel)jTable1.getModel();
                            int rownum = jTable1.getRowCount();
                            int colnum = jTable1.getColumnCount();
                            String[][] tabledata = new String[rownum][colnum];
                            for(int m=0;m<rownum;m++){    
                                for(int n=0;n<colnum;n++){
                                    tabledata[m][n] = (String)dtm.getValueAt(m,n);
                                }
                                if(m<props.length){
                                    props[m] = (String)dtm.getValueAt(m,0);
                                }
                            }

                            for(int m=0;m<rownum;m++){
                                if(m>props.length){
                                    String row = tabledata[m][1];
                                    for(int n=2;n<colnum;n++){
                                        row += "\t"+tabledata[m][n];
                                    }
                                    row += "\n";
                                    bwr.write(row);
                                }else if(m==props.length){

                                    String row = colnames[0];
                                    for(int n=1;n<colnames.length;n++){
                                        row += "\t"+colnames[n];
                                    }
                                    row += "\n";
                                    bwr.write(row);

                                    row = tabledata[m][1];
                                    for(int n=2;n<colnum;n++){
                                        row += "\t"+tabledata[m][n];
                                    }
                                    row += "\n";
                                    bwr.write(row);
                                }else{
                                    String row = tabledata[m][1];
                                    row += "\n";
                                    bwr.write(row);
                                }
                            }
                            bwr.close();
                        }catch(Exception e){
                            e.printStackTrace();
                        }
                   
                        jLabel1.setText("Data Saved!");
                        jProgressBar1.setIndeterminate(false);
                        jProgressBar1.setStringPainted(true);
                    }else{
                        jLabel1.setText("Data not saved!");
                        jProgressBar1.setIndeterminate(false);
                        jProgressBar1.setStringPainted(true);
                    }
                }
            };
            
            Thread th1 = new Thread(r1);
            th1.start();
            
        }catch(IllegalStateException ex){
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        th1.stop();
        try{
            statement.execute("DROP TABLE "+jTextField1.getText());
        }catch(Exception e){

        }
        javax.swing.table.DefaultTableModel dtm = new javax.swing.table.DefaultTableModel();
        dtm.addColumn("Row");
        jTable1.setModel(dtm);
        
        try{
            String command2 = "taskkill /IM Rterm.exe /F";
            Process child = Runtime.getRuntime().exec(command2);
        }catch(Exception e){

        }
        
        if(expButs.length>0){
            for(int a=0;a<expButs.length;a++){
                expButs[a].setEnabled(true);
            }
        }
        
        jLabel1.setText("Normalization is cancelled...");
        jProgressBar1.setIndeterminate(false);
        jProgressBar1.setStringPainted(true);
        jButton1.setEnabled(true);
        jButton2.setEnabled(true);
        jButton3.setEnabled(true);
        jButton4.setEnabled(true);
        jButton5.setEnabled(true);
        jButton7.setEnabled(true);
        jButton8.setEnabled(true);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        jFrame1.setVisible(true);
        jFrame1.setTitle(selectedExperiment);
        jFrame1.setExtendedState(JFrame.MAXIMIZED_BOTH);
        
    }//GEN-LAST:event_jButton10ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NormalizationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NormalizationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NormalizationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NormalizationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NormalizationUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
    javax.swing.JCheckBox[] celFilesCB = new javax.swing.JCheckBox[0];
    int count1 = 0;
    javax.swing.JCheckBox[] tempCelFilesCB = new javax.swing.JCheckBox[0];
    javax.swing.JCheckBox[] tempCelFilesCB2 = new javax.swing.JCheckBox[0];
    String RDIRECTORY = "";
    String connectionURL = "jdbc:derby:Expression;create=true;";
    Connection connection = null;
    Statement statement = null;
    JButton[] expButs;
    JButton[] expButs2;
    String selectedExperiment = "";
    int selectedExperimentIndex;
    String[][] dat;
    String[] colnames;
    String[] props = new String[6];
    Thread th1;
    BoxPlot bp;
    Dimension djPanel22;
                    
    public void rdir(){
        javax.swing.JOptionPane.showMessageDialog(null, "Please define R.exe directory!","R Directory Not Recognized!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        int returnVal = jFileChooser1.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION){
            java.io.File file = jFileChooser1.getSelectedFile();
            java.io.FileWriter fwr;
            java.io.BufferedWriter bwr;
            try{
                fwr = new java.io.FileWriter("RDirectory.mi");
                bwr = new java.io.BufferedWriter(fwr);
                java.io.File fil = jFileChooser1.getSelectedFile();
                RDIRECTORY = fil.getParent();
                java.util.StringTokenizer st = new java.util.StringTokenizer(RDIRECTORY, "\\");
                String st1 = st.nextToken();
                String newRDirectory = st1;
                if(st1.contains(" ")){
                    newRDirectory = "\""+st1+"\"";
                }
                String newStrR;
                while(st.hasMoreTokens()){
                    String stst = st.nextToken();
                    if(stst.contains(" ")){
                        newStrR = "\""+stst+"\"";
                    }else{
                        newStrR = stst;
                    }
                    newRDirectory = newRDirectory + "/" + newStrR;
                }
                RDIRECTORY = newRDirectory;
                bwr.write(RDIRECTORY);
                bwr.close();
            }catch (Exception ex) {
                System.out.println("problem accessing file"+file.getAbsolutePath());
            }
        }else{
            System.out.println("File access cancelled by user.");
        }
    }
    
    public class TablePanel extends javax.swing.JPanel{
        public TablePanel(int row, int col){
            setLayout(new java.awt.GridLayout(row,col));
            for(int i=0;i<row;i++){
                for(int j=0;j<col;j++){
                    add(new javax.swing.JTextField());
                }
            }
        }
    }
    
    public class Experiment implements ActionListener{
        public void actionPerformed(ActionEvent ae){
            
            for(int a=0;a<expButs.length;a++){
                expButs[a].setEnabled(false);
            }
            jButton8.setEnabled(true);
            selectedExperiment = ae.getActionCommand();
            jLabel1.setText("Opening experiment. Please Wait...");
            jProgressBar1.setIndeterminate(true);
            jProgressBar1.setStringPainted(false);
            
            SwingWorker worker=new SwingWorker(){
                protected Object doInBackground(){
                    return null;
                }
                protected void done(){
                    jButton7.setEnabled(true);
                    String command3 = "SELECT * FROM "+selectedExperiment;
                    PreparedStatement pr;
                    ResultSet rs;
                    try{
                        pr = connection.prepareStatement(command3);
                        rs = pr.executeQuery();
                        jTable1.setModel(DbUtils.resultSetToTableModel(rs));
                        DefaultTableModel dtmtab = (DefaultTableModel)jTable1.getModel();
                        DefaultTableModel dtm = new DefaultTableModel();
                        dtm.addColumn("Row");

                        int colnum = jTable1.getColumnCount();
                        int rownum = jTable1.getRowCount();
                        colnames = new String[colnum];

                        for(int m=0;m<colnum;m++){
                            dtm.addColumn(jTable1.getColumnName(m));
                            colnames[m] = jTable1.getColumnName(m);
                        }

                        Object[][] tabledata = new String[rownum][colnum];
                        dat = new String[rownum][colnum];

                        for(int m=0;m<rownum;m++){    
                            for(int n=0;n<colnum;n++){
                                tabledata[m][n] = dtmtab.getValueAt(m,n);
                                dat[m][n] = (String)dtmtab.getValueAt(m,n);
                            }
                            if(m<props.length){
                                props[m] = (String)dtmtab.getValueAt(m,0);
                            }
                        }

                        for(int m=0;m<rownum;m++){
                            if(m>=props.length){
                                String[] row = new String[colnum+1];
                                row[0] ="" + (m-5);
                                for(int k=1;k<row.length;k++){
                                    row[k] = (String)tabledata[m][k-1];
                                }
                                dtm.addRow(row);
                            }else{
                                String[] row = new String[colnum+1];
                                row[0] ="";
                                row[1] = props[m];
                                for(int k=2;k<row.length;k++){
                                    row[k] = "";
                                }
                                dtm.addRow(row);
                            }
                        }
                        jTable1.setModel(dtm);
                        int border = (colnum-1)*40+70;
                        
                        if(border>djPanel22.width){
                            jPanel22.setPreferredSize(new Dimension(border, djPanel22.height-50));
                            jPanel22.setSize(new Dimension(border, djPanel22.height-50));
                            jPanel22.validate();
                            jPanel22.repaint();
                            jScrollPane6.setPreferredSize(djPanel22);
                            jScrollPane6.setSize(djPanel22);
                            jScrollPane6.validate();
                            jScrollPane6.repaint();
                            
                        }else{
                            jPanel22.setPreferredSize(new Dimension(djPanel22.width-20,djPanel22.height-50));
                            jPanel22.setSize(new Dimension(djPanel22.width-20,djPanel22.height-50));
                            jPanel22.validate();
                            jPanel22.repaint();
                            
                        }

                    }catch(Exception e){
                        System.out.println("Err!");
                    }
                    jTabbedPane1.setSelectedIndex(2);
                    jButton5.setEnabled(false);
                    jButton6.setEnabled(false);
                    jButton3.doClick();
                    jButton2.doClick();
                    jPanel2.validate();
                    jPanel2.repaint();

                    jLabel1.setText("Experiment Opened!");
                    jProgressBar1.setIndeterminate(false);
                    jProgressBar1.setStringPainted(true);
                    for(int a=0;a<expButs.length;a++){
                        expButs[a].setEnabled(true);
                    }
                }
                
            };
            worker.execute();
            
        }
    }
    
    public class BoxPlot{
        String[] names;
        double[] med;
        double[] q1;
        double[] q3;
        double[] w1;
        double[] w2;
        
        public BoxPlot(double[][] a){
            int arow = a.length;
            int acol = a[0].length;
            med = new double[acol];
            q1 = new double[acol];
            q3 = new double[acol];
            w1= new double[acol];
            w2 = new double[acol];
            names = new String[acol];
            for(int i = 0;i<acol;i++){
                double[] col = new double[arow];
                for(int j = 0;j<arow;j++){
                    col[j] = a[j][i];
                }
                
                med[i] = median(col);
                q1[i] = quartile1(col);
                q3[i] = quartile3(col);
                w1[i] = whisker1(col);
                w2[i] = whisker2(col);
                names[i] = colnames[i+1];
            }
        }
        
        public double[] getMed(){
            return med;
        }
        public double[] getQ1(){
            return q1;
        }
        public double[] getQ3(){
            return q3;
        }
        public double[] getW1(){
            return w1;
        }
        public double[] getW2(){
            return w2;
        }
        public String[] getNames(){
            return names;
        }
        public double median(double[] a){
            double[] medi = a.clone();
            java.util.Arrays.sort(medi);
            int l = a.length;
            if(l%2==0){
                return((medi[l/2]+medi[l/2+1])/2);
            }else{
                return medi[l/2+1];
            }
        }
        public double max(double[] a){
            double m = a[0];
            for(int i = 1;i<a.length;i++){
                if(a[i]>m){
                    m=a[i];
                }
            }
            return(m);
        }
        public int maxPos(double[] a){
            int m = 0;
            for(int i = 0;i<a.length;i++){
                if(a[i]==max(a)){
                    m=i;
                    break;
                }
            }
            return(m);
        }
        public int minPos(double[] a){
            int m = 0;
            for(int i = 0;i<a.length;i++){
                if(a[i]==min(a)){
                    m=i;
                    break;
                }
            }
            return(m);
        }
        public double min(double[] a){
            double m = a[0];
            for(int i = 1;i<a.length;i++){
                if(a[i]<m){
                    m=a[i];
                }
            }
            return(m);
        }
        public double quartile1(double[] a){
            double[] sortedA = a.clone();
            java.util.Arrays.sort(sortedA);
                    
            int l = a.length;
            double[] b = new double[l/2];
            int bl = b.length;
            for(int i=0;i<bl;i++){
                b[i] = sortedA[i];
            }

            if(bl%2==0){
                return((b[bl/2]+b[bl/2+1])/2);
            }else{
                return(b[bl/2+1]);
            }
        }
        public double quartile3(double[] a){
            double[] sortedA = a.clone();
            java.util.Arrays.sort(sortedA);
            int l = a.length;
            double[] b = new double[l/2];
            int bl = b.length;
            for(int i=0;i<bl;i++){
                b[i] = sortedA[i+(l/2+1)];
            }

            if(bl%2==0){
                return((b[bl/2]+b[bl/2+1])/2);
            }else{
                return(b[bl/2+1]);
            }
        }
        public double whisker1(double[] a){
            double qu1 = quartile1(a);
            double qu3 = quartile3(a);
            double w1r = 1.5*(qu3 - qu1);
            return(min(a));
            
        }
        public double whisker2(double[] a){
            double qu1 = quartile1(a);
            double qu3 = quartile3(a);
            double w1r = 1.5*(qu3 - qu1);
            return(max(a));
        }

        public void paint(final Graphics g){
            DefaultTableModel dtm = (DefaultTableModel)jTable1.getModel();
            int rownum = jTable1.getRowCount();
            int colnum = jTable1.getColumnCount();
            double[][] tabledata = new double[rownum-props.length][colnum-2];
            for(int m=props.length;m<rownum;m++){
                for(int n=2;n<colnum;n++){
                    try{
                        tabledata[m-props.length][n-2] = Double.parseDouble((String)dtm.getValueAt(m,n));
                    }catch(Exception e){
                        System.out.println("m: "+m+", n: "+n+", str: "+(String)dtm.getValueAt(m,n));
                    }
                }
            }
            BoxPlot bp = new BoxPlot(tabledata);
            double[] meds = bp.getMed();
            double[] q1s = bp.getQ1();
            double[] q3s = bp.getQ3();
            double[] w1s = bp.getW1();
            double[] w2s = bp.getW2();
            String[] namess = bp.getNames();
            double max = bp.max(bp.getW2());
            double min = bp.min(bp.getW1());
            double[] smeds = meds.clone();
            double[] sq1s = q1s.clone();
            double[] sq3s = q3s.clone();
            double[] sw1s = w1s.clone();
            double[] sw2s = w2s.clone();
            int htot = jPanel22.getHeight();
            int xpos = 10;
            for(int i = 0; i<smeds.length;i++){
                smeds[i] = (jPanel22.getHeight()-20)*(smeds[i]-min)/(max-min);
                sq1s[i] = (jPanel22.getHeight()-20)*(sq1s[i]-min)/(max-min);
                sq3s[i] = (jPanel22.getHeight()-20)*(sq3s[i]-min)/(max-min);
                sw1s[i] = (jPanel22.getHeight()-20)*(sw1s[i]-min)/(max-min);
                sw2s[i] = (jPanel22.getHeight()-20)*(sw2s[i]-min)/(max-min);
                int y1 = (int)Math.floor(htot-(smeds[i]+10));
                int y2 = (int)Math.floor(htot-(sq1s[i]+10));
                int y3 = (int)Math.floor(htot-(sq3s[i]+10));
                int y4 = (int)Math.floor(htot-(sw1s[i]+10));
                int y5 = (int)Math.floor(htot-(sw2s[i]+10));

                g.drawLine(xpos, y1, xpos+20, y1);
                g.drawLine(xpos, y2, xpos+20, y2);
                g.drawLine(xpos, y3, xpos+20, y3);
                g.drawLine(xpos, y4, xpos+20, y4);
                g.drawLine(xpos, y5, xpos+20, y5);
                
                g.drawLine(xpos+10, y5, xpos+10, y3);
                g.drawLine(xpos, y3, xpos, y2);
                g.drawLine(xpos+20, y3, xpos+20, y2);
                g.drawLine(xpos+10, y2, xpos+10, y4);
            
                xpos = xpos + 40;

            }
        }
    
    }
    
    public class MouseL implements MouseMotionListener{
        public void mouseMoved(MouseEvent e){
            
            Point p = e.getPoint();
            int x = (int)p.getX();
            int y = (int)p.getY();
            int pos = (x-50)/40;
            try{
                if(pos>=0){
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    double bpmed = Double.valueOf(twoDForm.format(bp.getMed()[pos]));
                    jPanel22.setToolTipText("<html>Sample: "+colnames[pos+1]+"<br>Median: "+bpmed+"</html>");
                }
            }catch(Exception ex){
                
            }
        }
        public void mouseDragged(MouseEvent e){
            
        }
    }
}
